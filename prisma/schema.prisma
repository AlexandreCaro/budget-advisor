generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  tripPlans     TripPlan[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TripPlan {
  id                 String             @id @default(cuid())
  userId             String
  name               String
  status             TripStatus         @default(DRAFT)
  country            String?
  city               Json?
  cities             Json[]             @default([])
  startDate          DateTime?
  endDate            DateTime?
  travelers          Int?
  currency           String?
  overallBudget      Float?
  selectedCategories String[]           @default([])
  estimates          Json?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  departureLocation  DepartureLocation?
  expenses           ExpenseCategory[]
  estimate_history   estimate_history[]
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("trip_plans")
}

model ExpenseCategory {
  id                String   @id @default(cuid())
  tripPlanId        String
  name              String
  key               String
  preBooked         Boolean  @default(false)
  cost              Float?
  budgetType        String
  budgetValue       Float
  defaultPercentage Float
  selectedTier      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  estimates         Json?
  tripPlan          TripPlan @relation(fields: [tripPlanId], references: [id], onDelete: Cascade)

  @@unique([tripPlanId, key])
  @@index([tripPlanId])
}

model DepartureLocation {
  id         String   @id @default(cuid())
  lat        Float?
  lng        Float?
  name       String
  code       String?
  airport    String?
  tripPlanId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tripPlan   TripPlan @relation(fields: [tripPlanId], references: [id], onDelete: Cascade)

  @@index([tripPlanId])
}

model estimate_history {
  id         String   @id @default(cuid())
  tripPlanId String
  category   String
  estimates  Json    @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  trip_plans TripPlan @relation(fields: [tripPlanId], references: [id], onDelete: Cascade)

  @@unique([tripPlanId, category])
  @@index([tripPlanId])
}

enum TripStatus {
  DRAFT
  PLANNED
  ACTIVE
  CLOSED
}
